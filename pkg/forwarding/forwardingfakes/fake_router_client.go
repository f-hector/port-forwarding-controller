// Code generated by counterfeiter. DO NOT EDIT.
package forwardingfakes

import (
	sync "sync"

	forwarding "github.com/ljfranklin/port-forwarding-controller/pkg/forwarding"
)

type FakeRouterClient struct {
	CreateAddressStub        func(forwarding.Address) error
	createAddressMutex       sync.RWMutex
	createAddressArgsForCall []struct {
		arg1 forwarding.Address
	}
	createAddressReturns struct {
		result1 error
	}
	createAddressReturnsOnCall map[int]struct {
		result1 error
	}
	ListAddressesStub        func() ([]forwarding.Address, error)
	listAddressesMutex       sync.RWMutex
	listAddressesArgsForCall []struct {
	}
	listAddressesReturns struct {
		result1 []forwarding.Address
		result2 error
	}
	listAddressesReturnsOnCall map[int]struct {
		result1 []forwarding.Address
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRouterClient) CreateAddress(arg1 forwarding.Address) error {
	fake.createAddressMutex.Lock()
	ret, specificReturn := fake.createAddressReturnsOnCall[len(fake.createAddressArgsForCall)]
	fake.createAddressArgsForCall = append(fake.createAddressArgsForCall, struct {
		arg1 forwarding.Address
	}{arg1})
	fake.recordInvocation("CreateAddress", []interface{}{arg1})
	fake.createAddressMutex.Unlock()
	if fake.CreateAddressStub != nil {
		return fake.CreateAddressStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createAddressReturns
	return fakeReturns.result1
}

func (fake *FakeRouterClient) CreateAddressCallCount() int {
	fake.createAddressMutex.RLock()
	defer fake.createAddressMutex.RUnlock()
	return len(fake.createAddressArgsForCall)
}

func (fake *FakeRouterClient) CreateAddressCalls(stub func(forwarding.Address) error) {
	fake.createAddressMutex.Lock()
	defer fake.createAddressMutex.Unlock()
	fake.CreateAddressStub = stub
}

func (fake *FakeRouterClient) CreateAddressArgsForCall(i int) forwarding.Address {
	fake.createAddressMutex.RLock()
	defer fake.createAddressMutex.RUnlock()
	argsForCall := fake.createAddressArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRouterClient) CreateAddressReturns(result1 error) {
	fake.createAddressMutex.Lock()
	defer fake.createAddressMutex.Unlock()
	fake.CreateAddressStub = nil
	fake.createAddressReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouterClient) CreateAddressReturnsOnCall(i int, result1 error) {
	fake.createAddressMutex.Lock()
	defer fake.createAddressMutex.Unlock()
	fake.CreateAddressStub = nil
	if fake.createAddressReturnsOnCall == nil {
		fake.createAddressReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createAddressReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRouterClient) ListAddresses() ([]forwarding.Address, error) {
	fake.listAddressesMutex.Lock()
	ret, specificReturn := fake.listAddressesReturnsOnCall[len(fake.listAddressesArgsForCall)]
	fake.listAddressesArgsForCall = append(fake.listAddressesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListAddresses", []interface{}{})
	fake.listAddressesMutex.Unlock()
	if fake.ListAddressesStub != nil {
		return fake.ListAddressesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAddressesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRouterClient) ListAddressesCallCount() int {
	fake.listAddressesMutex.RLock()
	defer fake.listAddressesMutex.RUnlock()
	return len(fake.listAddressesArgsForCall)
}

func (fake *FakeRouterClient) ListAddressesCalls(stub func() ([]forwarding.Address, error)) {
	fake.listAddressesMutex.Lock()
	defer fake.listAddressesMutex.Unlock()
	fake.ListAddressesStub = stub
}

func (fake *FakeRouterClient) ListAddressesReturns(result1 []forwarding.Address, result2 error) {
	fake.listAddressesMutex.Lock()
	defer fake.listAddressesMutex.Unlock()
	fake.ListAddressesStub = nil
	fake.listAddressesReturns = struct {
		result1 []forwarding.Address
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterClient) ListAddressesReturnsOnCall(i int, result1 []forwarding.Address, result2 error) {
	fake.listAddressesMutex.Lock()
	defer fake.listAddressesMutex.Unlock()
	fake.ListAddressesStub = nil
	if fake.listAddressesReturnsOnCall == nil {
		fake.listAddressesReturnsOnCall = make(map[int]struct {
			result1 []forwarding.Address
			result2 error
		})
	}
	fake.listAddressesReturnsOnCall[i] = struct {
		result1 []forwarding.Address
		result2 error
	}{result1, result2}
}

func (fake *FakeRouterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAddressMutex.RLock()
	defer fake.createAddressMutex.RUnlock()
	fake.listAddressesMutex.RLock()
	defer fake.listAddressesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRouterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ forwarding.RouterClient = new(FakeRouterClient)

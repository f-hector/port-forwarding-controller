// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	sync "sync"

	service "github.com/ljfranklin/port-forwarding-controller/pkg/controller/service"
	forwarding "github.com/ljfranklin/port-forwarding-controller/pkg/forwarding"
)

type FakePortForwardingReconciler struct {
	CreateAddressesStub        func([]forwarding.Address) error
	createAddressesMutex       sync.RWMutex
	createAddressesArgsForCall []struct {
		arg1 []forwarding.Address
	}
	createAddressesReturns struct {
		result1 error
	}
	createAddressesReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteAddressesStub        func([]forwarding.Address) error
	deleteAddressesMutex       sync.RWMutex
	deleteAddressesArgsForCall []struct {
		arg1 []forwarding.Address
	}
	deleteAddressesReturns struct {
		result1 error
	}
	deleteAddressesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePortForwardingReconciler) CreateAddresses(arg1 []forwarding.Address) error {
	var arg1Copy []forwarding.Address
	if arg1 != nil {
		arg1Copy = make([]forwarding.Address, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.createAddressesMutex.Lock()
	ret, specificReturn := fake.createAddressesReturnsOnCall[len(fake.createAddressesArgsForCall)]
	fake.createAddressesArgsForCall = append(fake.createAddressesArgsForCall, struct {
		arg1 []forwarding.Address
	}{arg1Copy})
	fake.recordInvocation("CreateAddresses", []interface{}{arg1Copy})
	fake.createAddressesMutex.Unlock()
	if fake.CreateAddressesStub != nil {
		return fake.CreateAddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createAddressesReturns
	return fakeReturns.result1
}

func (fake *FakePortForwardingReconciler) CreateAddressesCallCount() int {
	fake.createAddressesMutex.RLock()
	defer fake.createAddressesMutex.RUnlock()
	return len(fake.createAddressesArgsForCall)
}

func (fake *FakePortForwardingReconciler) CreateAddressesCalls(stub func([]forwarding.Address) error) {
	fake.createAddressesMutex.Lock()
	defer fake.createAddressesMutex.Unlock()
	fake.CreateAddressesStub = stub
}

func (fake *FakePortForwardingReconciler) CreateAddressesArgsForCall(i int) []forwarding.Address {
	fake.createAddressesMutex.RLock()
	defer fake.createAddressesMutex.RUnlock()
	argsForCall := fake.createAddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePortForwardingReconciler) CreateAddressesReturns(result1 error) {
	fake.createAddressesMutex.Lock()
	defer fake.createAddressesMutex.Unlock()
	fake.CreateAddressesStub = nil
	fake.createAddressesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePortForwardingReconciler) CreateAddressesReturnsOnCall(i int, result1 error) {
	fake.createAddressesMutex.Lock()
	defer fake.createAddressesMutex.Unlock()
	fake.CreateAddressesStub = nil
	if fake.createAddressesReturnsOnCall == nil {
		fake.createAddressesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createAddressesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePortForwardingReconciler) DeleteAddresses(arg1 []forwarding.Address) error {
	var arg1Copy []forwarding.Address
	if arg1 != nil {
		arg1Copy = make([]forwarding.Address, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.deleteAddressesMutex.Lock()
	ret, specificReturn := fake.deleteAddressesReturnsOnCall[len(fake.deleteAddressesArgsForCall)]
	fake.deleteAddressesArgsForCall = append(fake.deleteAddressesArgsForCall, struct {
		arg1 []forwarding.Address
	}{arg1Copy})
	fake.recordInvocation("DeleteAddresses", []interface{}{arg1Copy})
	fake.deleteAddressesMutex.Unlock()
	if fake.DeleteAddressesStub != nil {
		return fake.DeleteAddressesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteAddressesReturns
	return fakeReturns.result1
}

func (fake *FakePortForwardingReconciler) DeleteAddressesCallCount() int {
	fake.deleteAddressesMutex.RLock()
	defer fake.deleteAddressesMutex.RUnlock()
	return len(fake.deleteAddressesArgsForCall)
}

func (fake *FakePortForwardingReconciler) DeleteAddressesCalls(stub func([]forwarding.Address) error) {
	fake.deleteAddressesMutex.Lock()
	defer fake.deleteAddressesMutex.Unlock()
	fake.DeleteAddressesStub = stub
}

func (fake *FakePortForwardingReconciler) DeleteAddressesArgsForCall(i int) []forwarding.Address {
	fake.deleteAddressesMutex.RLock()
	defer fake.deleteAddressesMutex.RUnlock()
	argsForCall := fake.deleteAddressesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePortForwardingReconciler) DeleteAddressesReturns(result1 error) {
	fake.deleteAddressesMutex.Lock()
	defer fake.deleteAddressesMutex.Unlock()
	fake.DeleteAddressesStub = nil
	fake.deleteAddressesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePortForwardingReconciler) DeleteAddressesReturnsOnCall(i int, result1 error) {
	fake.deleteAddressesMutex.Lock()
	defer fake.deleteAddressesMutex.Unlock()
	fake.DeleteAddressesStub = nil
	if fake.deleteAddressesReturnsOnCall == nil {
		fake.deleteAddressesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAddressesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePortForwardingReconciler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAddressesMutex.RLock()
	defer fake.createAddressesMutex.RUnlock()
	fake.deleteAddressesMutex.RLock()
	defer fake.deleteAddressesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePortForwardingReconciler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.PortForwardingReconciler = new(FakePortForwardingReconciler)

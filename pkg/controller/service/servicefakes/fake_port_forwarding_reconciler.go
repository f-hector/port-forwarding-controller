// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	sync "sync"

	service "github.com/ljfranklin/port-forwarding-controller/pkg/controller/service"
	forwarding "github.com/ljfranklin/port-forwarding-controller/pkg/forwarding"
)

type FakePortForwardingReconciler struct {
	ReconcileStub        func([]forwarding.Address) error
	reconcileMutex       sync.RWMutex
	reconcileArgsForCall []struct {
		arg1 []forwarding.Address
	}
	reconcileReturns struct {
		result1 error
	}
	reconcileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePortForwardingReconciler) Reconcile(arg1 []forwarding.Address) error {
	var arg1Copy []forwarding.Address
	if arg1 != nil {
		arg1Copy = make([]forwarding.Address, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.reconcileMutex.Lock()
	ret, specificReturn := fake.reconcileReturnsOnCall[len(fake.reconcileArgsForCall)]
	fake.reconcileArgsForCall = append(fake.reconcileArgsForCall, struct {
		arg1 []forwarding.Address
	}{arg1Copy})
	fake.recordInvocation("Reconcile", []interface{}{arg1Copy})
	fake.reconcileMutex.Unlock()
	if fake.ReconcileStub != nil {
		return fake.ReconcileStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reconcileReturns
	return fakeReturns.result1
}

func (fake *FakePortForwardingReconciler) ReconcileCallCount() int {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	return len(fake.reconcileArgsForCall)
}

func (fake *FakePortForwardingReconciler) ReconcileCalls(stub func([]forwarding.Address) error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = stub
}

func (fake *FakePortForwardingReconciler) ReconcileArgsForCall(i int) []forwarding.Address {
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	argsForCall := fake.reconcileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePortForwardingReconciler) ReconcileReturns(result1 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	fake.reconcileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePortForwardingReconciler) ReconcileReturnsOnCall(i int, result1 error) {
	fake.reconcileMutex.Lock()
	defer fake.reconcileMutex.Unlock()
	fake.ReconcileStub = nil
	if fake.reconcileReturnsOnCall == nil {
		fake.reconcileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reconcileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePortForwardingReconciler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reconcileMutex.RLock()
	defer fake.reconcileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePortForwardingReconciler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.PortForwardingReconciler = new(FakePortForwardingReconciler)
